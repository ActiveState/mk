# Test setup
>>> from os.path import join, exists
>>> import sys
>>> from mklib import runner, sh
>>> if sys.platform == "win32":
...     class path_normalizer(object):
...         def write(self, s):
...             sys.stdout.write(s.replace('\\', '/'))
...         def __getattr__(self, n):
...             return getattr(sys.stdout, n)
...     runner.setup_logging(path_normalizer())
... else:
...     runner.setup_logging(sys.stdout)
>>> def pause():
...     import time
...     time.sleep(0.5)
>>> def tweak(path):
...     f = open(path)
...     orig = f.read()
...     f.close()
...     f = open(path, 'a')
...     f.write('booga')
...     f.close()
...     return orig
>>> def write_path(path, content):
...     f = open(path, 'w')
...     f.write(content)
...     f.close()


# A clean run should do all the build steps.
>>> runner.mk(['', 'clean'])
>>> runner.mk(['', 'finishup'])
mk: [foo] mkdir `build'
mk: [foo] cp src/foo.txt build/foo.txt
mk: [bar] cp src/bar.txt build/bar.txt
mk: [finishup] touch `build/done.txt'


# Because "sources" is an alias, making the "finishup" target should
# now only rebuild when dependencies are actually out-of-date.
>>> runner.mk(['', 'finishup'])
mk: Task `finishup' is up to date.
>>> pause(); orig = tweak("src/foo.txt")  # Pause to avoid spurious time resolution error.
>>> runner.mk(['', 'finishup'])
mk: [foo] cp src/foo.txt build/foo.txt
mk: [finishup] touch `build/done.txt'
>>> runner.mk(['', 'finishup'])
mk: Task `finishup' is up to date.
>>> write_path("src/foo.txt", orig) # Clean up
